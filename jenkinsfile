pipeline {
    agent any

    environment{
        NETLIFY_SITE_ID = '28a38be3-3bcd-4832-8652-94c05fd86612'
        NETLIFY_AUTH_TOKEN = credentials('n-j-sec-token')
    }

    stages {

        stage('CheDockerckout') {
            steps {
                sh 'docker build -t myplayright .'
            }
        }


        stage('Build') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls -la   
                '''
            }
        }

        stage('Deploy') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    netlify --version
                    netlify status
                    netlify deploy --dir=build --json> deploy-output.json
                    node-jq -r '.deploy_id' deploy-output.json

                '''
            }
        }

        // stage('Approval') {
        //     steps {
        //         timeout(time: 1, unit: 'MINUTES') {
        //             input message: 'Approve to proceed to Parallel stage?'
        //         }
        //     }
        // }

        stage('Parallel') {
            parallel {

                stage('Test'){
                    agent{
                        docker{
                        image 'node:18-alpine'
                        reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            echo 'test stage'
                            ls build/index.html &>/dev/null && echo "File exists" || echo "File does not exist"
                            npm test
                        '''
                    }
                    post{
                        always{
                            junit 'jest-results/junit.xml'
                        }
                    }
                }

                stage('E2E') {
                    agent{
                        docker{
                            image 'myplayright'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            npm install serve
                            node_modules/.bin/serve -s build &
                            sleep 10
                            npx playwright test --reporter=html
                        '''
                    }
                    post{
                        always{
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }

                }

            }
        }
    }

}



